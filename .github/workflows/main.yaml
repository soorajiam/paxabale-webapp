name: Continuous Integration and Delivery # workflow name

on:  # this is the entry point to the events, we specificy when the actions should be run
  push:
    branches: [main]  #specificy  which branch should the workflow be triggered
  pull_request:
    branches: [main] #specificy  which branch should the workflow be triggered

jobs:
  testing-docker-compose-auto-deploy-digital-ocean: # name of  the job
    runs-on: ubuntu-latest # specify that the app will run on the latest version of ubuntu
    steps:  # steps that should be followed while  building and deploying the image.
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v2
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - uses: actions/checkout@v2
#      - name: Build the stack
#        run: docker-compose  -f docker-compose.yaml up -d --build
#      - name: Get docker logs
#        run: docker ps
#      - name: Login to DockerHub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Push to dockerhub
#        run: |
#          docker-compose push # this pushes the  image to the repo that we have defined in the docker-compose.yaml file.
#      - name: stop containers
#        run: docker-compose -f docker-compose.yaml down --volumes
      - name: Executing remote  command and deployment to digital ocean for dev environment
        uses: appleboy/ssh-action@master
        with:
          host: "${{ secrets.DROPLET_IP }}"
          USERNAME: "${{ secrets.DROPLET_USERNAME }}"
          PORT: 22
          KEY: ${{ secrets.DO_PRIVATE_KEY}}
          script: |
            source pax-env/bin/activate
            cd paxabale-webap/
            git pull origin main
            pip install -r requirements.txt
            python manage.py migrate
            python manage.py collectstatic --noinput
            sudo systemctl restart nginx
            sudo supervisorctl restart pax-unicorn
            
            
            

#            docker system prune -af
#            docker compose  -f docker-compose.yaml down --volumes
#            echo "${{secrets.DOCKER_PASSWORD}}" | docker login -u ${{secrets.DOCKER_USERNAME}} --password-stdin
#            docker system prune -af
#            docker compose -f docker-compose.yaml pull
#            docker compose -f docker-compose.yaml  up --build --remove-orphans -d --force-recreate
#            # docker-compose -f docker-compose.yaml up  --build

